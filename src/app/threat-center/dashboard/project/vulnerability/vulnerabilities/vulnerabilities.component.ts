import { Component, Input, OnInit, HostListener, EventEmitter, Output } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Scan } from '@app/threat-center/shared/models/types';
import { ApiService } from '@app/threat-center/shared/services/api.service';
import { Observable } from 'rxjs';
import { debounceTime, map, filter, startWith } from 'rxjs/operators';

@Component({
  selector: 'vulnerabilities',
  templateUrl: './vulnerabilities.component.html',
  styles: []
})
export class VulnerabilitiesComponent implements OnInit {

  @Input() scanId;
  @Output() dataCount = new EventEmitter<string>();
  obsScan: Observable<Scan>;
  public innerHeight: any;

  columns = [
    { header: 'Vulnerability' },
    { header: 'Component' },
    { header: 'Group' },
    { header: 'Version' },
    { header: 'Cwe' },
    { header: 'Severity' },
    { header: 'CVSS2' },
    { header: 'CVSS3' }
  ];

  constructor(private apiService: ApiService,
    private router: Router,
    private route: ActivatedRoute) { }

  ngOnInit() {
    console.log("scanId:", this.scanId);

    if (!this.obsScan) {
      console.log("Loading WidgetVulnerabilitiesComponent");
      this.obsScan = this.apiService.getScanVulnerabilities(this.scanId)
        .pipe(map(result => result.data));

      this.obsScan.subscribe((scan: any) => {
        this.dataCount.emit(scan.scan.components['totalCount']);
      });
    }
  }

  @HostListener('window:resize', ['$event'])
  onResize(event) {
    this.innerHeight = window.innerHeight;
  }

  gotoDetails(vulId) {
    const entityId = this.route.snapshot.paramMap.get('entityId'), projectId = this.route.snapshot.paramMap.get('projectId');
    const url = "dashboard/entity/" + entityId + '/project/' + projectId + '/scan/' + this.scanId + "/vulnerability/" + vulId;
    this.router.navigate([decodeURIComponent(url)]);
  }
}
