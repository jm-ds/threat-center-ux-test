import {Component, HostListener, Input, OnInit, ViewChild} from '@angular/core';
import {MatPaginator} from '@angular/material';
import {ActivatedRoute, Router} from '@angular/router';
import {Scan} from '@app/threat-center/shared/models/types';
import {ApiService} from '@app/threat-center/shared/services/api.service';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';

@Component({
    selector: 'app-vulnerabilities',
    templateUrl: './vulnerabilities.component.html',
    styles: []
})
export class VulnerabilitiesComponent implements OnInit {

    @Input() scanId;
    @Input() obsScan: Observable<Scan>;
    public innerHeight: any;

    // Pagination Details
    defaultPageSize = 25;
    @ViewChild(MatPaginator, {static: false}) paginator: MatPaginator;
    vulnerabilitiesDetails: any;

    columns = [
        {header: 'Vulnerability'},
        {header: 'Component'},
        {header: 'Group'},
        {header: 'Version'},
        {header: 'Cwe'},
        {header: 'Severity'},
        {header: 'CVSS2'},
        {header: 'CVSS3'}
    ];

    constructor(private apiService: ApiService,
                private router: Router,
                private route: ActivatedRoute) {
    }

    globalFilter: string;
    columnsFilter = new Map();
    timeOut;
    timeOutDuration = 1000;

    ngOnInit() {
        this.globalFilter = "";
        console.log("vuln.cop scanId: ", this.scanId);
        if (!this.obsScan) {
            console.log("Loading WidgetVulnerabilitiesComponent");
            this.obsScan = this.apiService.getScanVulnerabilities(this.scanId, this.makeFilterMapForService(), Number(this.defaultPageSize))
                .pipe(map(result => result.data));
            this.initData();
        } else {
            this.initData();
        }
    }

    @HostListener('window:resize', ['$event'])
    onResize(event) {
        this.innerHeight = window.innerHeight;
    }

    // While any changes occurred in page
    changePage(pageInfo) {
        if (this.defaultPageSize.toString() !== pageInfo.pageSize.toString()) {
            // page size changed...
            this.defaultPageSize = pageInfo.pageSize;
            // API Call
            this.loadVulnerabilitiesData(Number(this.defaultPageSize), undefined, undefined, undefined);
            this.paginator.firstPage();
        } else {
            // Next and Previous changed
            if (pageInfo.pageIndex > pageInfo.previousPageIndex) {
                // call with after...
                if (!!this.vulnerabilitiesDetails.scan.vulnerabilities.pageInfo && this.vulnerabilitiesDetails.scan.vulnerabilities.pageInfo['hasNextPage']) {
                    this.loadVulnerabilitiesData(Number(this.defaultPageSize), undefined,
                        this.vulnerabilitiesDetails.scan.vulnerabilities.pageInfo['endCursor'], undefined);
                }
            } else {
                // call with before..
                if (!!this.vulnerabilitiesDetails.scan.vulnerabilities.pageInfo && this.vulnerabilitiesDetails.scan.vulnerabilities.pageInfo['hasPreviousPage']) {
                    this.loadVulnerabilitiesData(undefined, Number(this.defaultPageSize),
                        undefined, this.vulnerabilitiesDetails.scan.vulnerabilities.pageInfo['startCursor']);
                }
            }
        }
    }

    // Loading VulnerabilitiesComponent data after paggination for scan tab.
    loadVulnerabilitiesData(first, last, endCursor = undefined, startCursor = undefined) {
        let vulnerabilities = this.apiService.getScanVulnerabilities(this.scanId, this.makeFilterMapForService(), first, last, endCursor, startCursor)
            .pipe(map(result => result.data));
        vulnerabilities.subscribe(scan => {
            this.vulnerabilitiesDetails = scan;
        });
    }

    gotoDetails(vulId) {
        const entityId = this.route.snapshot.paramMap.get('entityId');
        const projectId = this.route.snapshot.paramMap.get('projectId');
        const url = "dashboard/entity/" + entityId + '/project/' + projectId + '/scan/' + this.scanId + "/vulnerability/" + vulId;
        this.router.navigate([decodeURIComponent(url)]);
    }

    filterData(pattern) {
        console.log("Pattern: " + pattern);
        this.globalFilter = pattern;
    }

    filterColumn(column, value) {
        if (value.length === 0) {
            this.columnsFilter.delete(column);
        } else {
            this.columnsFilter.set(column, value);
        }
        clearTimeout(this.timeOut);
        this.timeOut = setTimeout(() => {
            this.obsScan = this.apiService.getScanVulnerabilities(this.scanId, this.makeFilterMapForService(), Number(this.defaultPageSize))
                .pipe(map(result => result.data));
            this.initData();
        }, this.timeOutDuration);
    }

    getColumnFilterValue(key) {
        let value = this.columnsFilter.get(key);
        if (value === undefined) {
            if (key === 'Severity') {
                return 'ALL';
            } else {
                return '';
            }
        } else {
            return value;
        }
    }

    private makeFilterMapForService() {
        let vulnString = '';
        this.columnsFilter.forEach((val, key) => {
                vulnString += key + ":" + val + ",";
        });
        return vulnString;
    }

    private initData() {
        this.obsScan.subscribe(scan => {
            this.vulnerabilitiesDetails = scan;
        });
    }
}
