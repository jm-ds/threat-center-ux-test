import { Component, Input, OnInit, HostListener, ViewChild, EventEmitter, Output } from '@angular/core';
import { MatPaginator } from '@angular/material';
import { ActivatedRoute, Router } from '@angular/router';
import { Scan } from '@app/threat-center/shared/models/types';
import { ApiService } from '@app/threat-center/shared/services/api.service';
import { Observable } from 'rxjs';
import { debounceTime, map, filter, startWith } from 'rxjs/operators';

@Component({
  selector: 'vulnerabilities',
  templateUrl: './vulnerabilities.component.html',
  styles: []
})
export class VulnerabilitiesComponent implements OnInit {

  @Input() scanId;
  @Output() dataCount = new EventEmitter<string>();
  obsScan: Observable<Scan>;
  public innerHeight: any;

  //Paggination Details
  defaultPageSize = 25;
  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;
  vulnerabilitiesDetails: any;

  columns = [
    { header: 'Vulnerability' },
    { header: 'Component' },
    { header: 'Group' },
    { header: 'Version' },
    { header: 'Cwe' },
    { header: 'Severity' },
    { header: 'CVSS2' },
    { header: 'CVSS3' }
  ];

  constructor(private apiService: ApiService,
    private router: Router,
    private route: ActivatedRoute) { }

  ngOnInit() {
    console.log("scanId:", this.scanId);

    if (!this.obsScan) {
      console.log("Loading WidgetVulnerabilitiesComponent");
      this.obsScan = this.apiService.getScanVulnerabilities(this.scanId, Number(this.defaultPageSize))
        .pipe(map(result => result.data));

      this.obsScan.subscribe(scan => {
        this.vulnerabilitiesDetails = scan;
      });
    }
  }

  @HostListener('window:resize', ['$event'])
  onResize(event) {
    this.innerHeight = window.innerHeight;
  }

  //While any changes occurred in page
  changePage(pageInfo) {
    if (this.defaultPageSize.toString() !== pageInfo.pageSize.toString()) {
      //page size changed...
      this.defaultPageSize = pageInfo.pageSize;
      //API Call
      this.loadVulnerabilitiesData(Number(this.defaultPageSize), undefined, undefined, undefined);
      this.paginator.firstPage();
    }
    else {
      //Next and Previous changed
      if (pageInfo.pageIndex > pageInfo.previousPageIndex) {
        //call with after...
        if (!!this.vulnerabilitiesDetails.scan.components.pageInfo && this.vulnerabilitiesDetails.scan.components.pageInfo['hasNextPage']) {
          this.loadVulnerabilitiesData(Number(this.defaultPageSize), undefined,
            this.vulnerabilitiesDetails.scan.components.pageInfo['endCursor'], undefined);
        }
      } else {
        //call with before..
        if (!!this.vulnerabilitiesDetails.scan.components.pageInfo && this.vulnerabilitiesDetails.scan.components.pageInfo['hasPreviousPage']) {
          this.loadVulnerabilitiesData(undefined, Number(this.defaultPageSize),
            undefined, this.vulnerabilitiesDetails.scan.components.pageInfo['startCursor']);
        }
      }
    }
  }

  //Loading VulnerabilitiesComponent data after paggination for scan tab.
  loadVulnerabilitiesData(first, last, endCursor = undefined, startCursor = undefined) {
    let vulnerabilities = this.apiService.getScanVulnerabilities(this.scanId, first, last, endCursor, startCursor)
      .pipe(map(result => result.data));
    vulnerabilities.subscribe(scan => {
      this.vulnerabilitiesDetails = scan;
    });
  }
  gotoDetails(vulId) {
    const entityId = this.route.snapshot.paramMap.get('entityId'), projectId = this.route.snapshot.paramMap.get('projectId');
    const url = "dashboard/entity/" + entityId + '/project/' + projectId + '/scan/' + this.scanId + "/vulnerability/" + vulId;
    this.router.navigate([decodeURIComponent(url)]);
  }
}
