import { Component, Input, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { forkJoin, Observable } from 'rxjs';
import { debounceTime, map, filter, startWith } from 'rxjs/operators';
import {NgbModal, NgbTabChangeEvent} from '@ng-bootstrap/ng-bootstrap';
import { MarkdownModule } from 'ngx-markdown';
import {Scan, License, Vulnerability, FixResult} from '@app/threat-center/shared/models/types';
import { ApiService, StateService } from '@app/threat-center/shared/services';
import { CoreHelperService } from '@app/core/services/core-helper.service';
import Swal from "sweetalert2";
import {NgxSpinnerService} from "ngx-spinner";
import {FixService} from "@app/threat-center/dashboard/project/services/fix.service";
import {FixResultComponent} from "@app/threat-center/dashboard/project/fix-result/fix-result.component";

@Component({
  selector: 'vulnerability-detail',
  templateUrl: './vulnerability-detail.component.html',
  styles: []
})
export class VulnerabilityDetailComponent implements OnInit, OnDestroy {

  @Input() scanId;
  obsVulnerability: Observable<Vulnerability>;
  componentColumns = ['Name', 'Group', 'Version', 'Internal', 'Licenses', 'Vulnerabilities'];

  fixResultObservable: Observable<FixResult[]>;
  newVersion: string;

  projectId: string = "";
  breadcumDetail: any = {};
  constructor(
    private apiService: ApiService,
    private stateService: StateService,
    private route: ActivatedRoute,
    private router: Router,
    private fixService: FixService,
    private spinner: NgxSpinnerService,
    private coreHelperService: CoreHelperService,
    private modalService: NgbModal) { }


  ngOnInit() {
    console.log("Loading VulnerabilityDetailComponent");
    let vulnerabilityId = this.route.snapshot.paramMap.get('vulnerabilityId');
    this.projectId = this.route.snapshot.paramMap.get('projectId');
    console.log("vulnerabilityId:", vulnerabilityId);
    this.obsVulnerability = this.apiService.getVulnerability(vulnerabilityId)
      .pipe(map(result => result.data.vulnerability));
    this.initBreadcum();
  }
  ngOnDestroy(): void {
    this.coreHelperService.settingProjectBreadcum("", "", "", false);
  }

  onTabChange($event: NgbTabChangeEvent) {
    this.stateService.vulnerability_tabs_selectedTab = $event.nextId;
  }

  fixVersion(componentId: string, groupId: string, artifactId: string, oldVersion: string) {
    this.spinner.show();
    this.fixResultObservable = this.fixService.fixComponentVersion(this.scanId, componentId, groupId, artifactId, oldVersion, this.newVersion.split("||")[1]);
    this.fixResultObservable.subscribe(res => {
      this.spinner.hide();
      const modalRef = this.modalService.open(FixResultComponent, {
        keyboard: false,
      });
      modalRef.componentInstance.fixResults = res;
    });
  }

  public releaseCols = ['Name', 'Version'];
  public releases = [
    { version: '2.12.1', date: 'Jan 09, 2021' },
    { version: '2.12.0', date: 'Nov 29, 2020' },
    { version: '2.12.0-rc2', date: 'Nov 15, 2020' },
    { version: '2.12.0-rc1', date: 'Oct 12, 2020' },
    { version: '2.11.4', date: 'Dec 12, 2020' },
    { version: '2.11.3', date: 'Oct 02, 2020' },
    { version: '2.11.2', date: 'Aug 02, 2020' },
    { version: '2.11.1', date: 'Jun 25, 2020' },
    { version: '2.11.0', date: 'Apr 26, 2020' },
    { version: '2.11.0.rc1', date: 'Mar 24, 2020' },
    { version: '2.10.5.1', date: 'Dec 02, 2020' },
    { version: '2.10.5', date: 'Jul 21, 2020' },
    { version: '2.10.4', date: 'May 03, 2020' },
    { version: '2.10.3', date: 'Mar 03, 2020' },
    { version: '2.10.2', date: 'Jan 05, 2020' },
    { version: '2.10.1', date: 'Nov 09, 2019' },
    { version: '2.10.0', date: 'Sep 26, 2019' },
    { version: '2.10.0.pr3', date: 'Sep 17, 2019' },
    { version: '2.10.0.pr2', date: 'Aug 31, 2019' },
    { version: '2.10.0.pr1', date: 'Jul 19, 2019' },
    { version: '2.9.10.8', date: 'Jan 06, 2021' },
    { version: '2.9.10.7', date: 'Dec 02, 2020' },
    { version: '2.9.10.6', date: 'Aug 25, 2020' },
    { version: '2.9.10.5', date: 'Jun 22, 2020' },
    { version: '2.9.10.4', date: 'Apr 11, 2020' },
  ];

  gotoProject() {
    const entityId = this.route.snapshot.paramMap.get('entityId');
    const url = "dashboard/entity/" + entityId + "/project/" + this.projectId;
    this.router.navigate([url]);
  }

  gotoComponent() {
    const entityId = this.route.snapshot.paramMap.get('entityId');
    const url = "dashboard/entity/" + entityId + "/project/" + this.projectId + "/component/" + this.breadcumDetail.SelectedComponent['id'];
    this.router.navigate([url]);
  }

  //Initialize breadcum details
  private initBreadcum() {
    this.breadcumDetail = this.coreHelperService.getProjectBreadcum();
  }
}
