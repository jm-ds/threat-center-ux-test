import { Component, Input, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { forkJoin, Observable } from 'rxjs';
import { debounceTime, map, filter, startWith } from 'rxjs/operators';
import { NgbTabChangeEvent } from '@ng-bootstrap/ng-bootstrap';
import { MarkdownModule } from 'ngx-markdown';
import { Scan, License, Vulnerability } from '@app/threat-center/shared/models/types';
import { ApiService, StateService } from '@app/threat-center/shared/services';
import { CoreHelperService } from '@app/core/services/core-helper.service';

@Component({
  selector: 'vulnerability-detail',
  templateUrl: './vulnerability-detail.component.html',
  styles: []
})
export class VulnerabilityDetailComponent implements OnInit, OnDestroy {

  obsVulnerability: Observable<Vulnerability>;
  componentColumns = ['Name', 'Group', 'Version', 'Internal', 'Licenses', 'Vulnerabilities'];

  projectId: string = "";
  breadcumDetail: any = {};
  constructor(
    private apiService: ApiService,
    private stateService: StateService,
    private route: ActivatedRoute,
    private router: Router,
    private coreHelperService: CoreHelperService) { }


  ngOnInit() {
    console.log("Loading VulnerabilityDetailComponent");
    let vulnerabilityId = this.route.snapshot.paramMap.get('vulnerabilityId');
    this.projectId = this.route.snapshot.paramMap.get('projectId');
    console.log("vulnerabilityId:", vulnerabilityId);
    this.obsVulnerability = this.apiService.getVulnerability(vulnerabilityId)
      .pipe(map(result => result.data.vulnerability));
    this.initBreadcum();
  }
  ngOnDestroy(): void {
    this.coreHelperService.settingProjectBreadcum("", "", "", false);
  }

  onTabChange($event: NgbTabChangeEvent) {
    this.stateService.vulnerability_tabs_selectedTab = $event.nextId;
  }

  public releaseCols = ['Name', 'Version'];
  public releases = [
    { version: 'v4.3.5-RELEASE', date: '05/20/2020' },
    { version: 'v4.3.4-RELEASE', date: '05/01/2020' },
    { version: 'v4.3.3-RELEASE', date: '04/13/2020' },
    { version: 'v4.3.2-RELEASE', date: '04/01/2020' },
    { version: 'v4.3.2-RC5', date: '03/02/2020' },
    { version: 'v4.3.2-RC4', date: '02/10/2020' },
    { version: 'v4.3.2-RC3', date: '01/21/2020' },
    { version: 'v4.3.2-RC2', date: '01/01/2020' },
    { version: 'v4.3.2-RC1', date: '12/25/2019' },
    { version: 'v4.3.1-RELEASE', date: '11/15/2019' },
  ];

  gotoProject() {
    const entityId = this.route.snapshot.paramMap.get('entityId');
    const url = "dashboard/entity/" + entityId + "/project/" + this.projectId;
    this.router.navigate([url]);
  }

  gotoComponent() {
    const entityId = this.route.snapshot.paramMap.get('entityId');
    const url = "dashboard/entity/" + entityId + "/project/" + this.projectId + "/component/" + this.breadcumDetail.SelectedComponent['id'];
    this.router.navigate([url]);
  }

  //Initialize breadcum details
  private initBreadcum() {
    this.breadcumDetail = this.coreHelperService.getProjectBreadcum();
  }
}
